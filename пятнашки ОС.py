import random  # Импортируем модуль random для генерации случайных чисел


class FifteenPuzzle:
    def __init__(self):
        """Инициализирует игровую доску и перемешивает плитки."""
        # Создаем начальное состояние доски 4x4 с плитками от 1 до 15 и пустой клеткой (0)
        self.board = [
            [1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 10, 11, 12],
            [13, 14, 15, 0]
        ]
        self.shuffle()  # Перемешиваем плитки при инициализации

    def shuffle(self):
        """Перемешивает плитки на игровом поле."""
        for _ in range(1000):  # Перемешиваем плитки 1000 раз
            empty_row, empty_col = self.get_empty_position()  # Получаем координаты пустой клетки

            # Генерируем возможные сдвиги для пустой плитки
            possible_moves = []
            if empty_row > 0:  # Пустая плитка может двигаться вверх
                possible_moves.append((empty_row - 1, empty_col))
            if empty_row < 3:  # Пустая плитка может двигаться вниз
                possible_moves.append((empty_row + 1, empty_col))
            if empty_col > 0:  # Пустая плитка может двигаться влево
                possible_moves.append((empty_row, empty_col - 1))
            if empty_col < 3:  # Пустая плитка может двигаться вправо
                possible_moves.append((empty_row, empty_col + 1))

            # Случайный выбор одного из возможных движений
            if possible_moves:
                row, col = random.choice(possible_moves)  # Выбираем случайный сдвиг
                self.move_tile(row, col)  # Перемещаем плитку

    def print_board(self):
        """Выводит игровое поле в консоль."""
        for row in self.board:  # Проходим по каждой строке доски
            print(row)  # Выводим строку на экран

    def get_empty_position(self):
        """Возвращает координаты пустой клетки."""
        for i in range(4):  # Проходим по всем строкам
            for j in range(4):  # Проходим по всем столбцам
                if self.board[i][j] == 0:  # Если находим пустую клетку (0)
                    return i, j  # Возвращаем ее координаты

    def move_tile(self, row, col):
        """Перемещает плитку с заданных координат на пустое место."""
        empty_row, empty_col = self.get_empty_position()  # Получаем координаты пустой клетки

        # Проверяем, находится ли выбранная плитка рядом с пустой клеткой
        if abs(row - empty_row) + abs(col - empty_col) == 1:
            # Если да, то выполняем обмен значениями
            self.board[empty_row][empty_col] = self.board[row][col]  # Перемещаем плитку на место пустой
            self.board[row][col] = 0  # Пустая клетка теперь занимает место перемещенной плитки
            return True  # Возвращаем True для успешного перемещения
        else:
            print("Неверный ход!")  # Если ход недопустим (плитка не рядом), выводим сообщение
            return False  # Возвращаем False для неудачного перемещения

    def is_solved(self):
        """Проверяет, решена ли головоломка."""
        target_board = [  # Определяем целевое состояние доски
            [1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 10, 11, 12],
            [13, 14, 15, 0]
        ]
        return self.board == target_board  # Сравниваем текущую доску с целевой


def main():
    """Основная функция игры."""
    game = FifteenPuzzle()  # Создаем экземпляр игры "Пятнашки"
    print("Начальное состояние:")  # Выводим сообщение о начальном состоянии игры
    game.print_board()  # Печатаем начальное состояние доски

    while not game.is_solved():  # Пока головоломка не решена
        print("\nВведите координаты плитки (строка, столбец), которую хотите переместить:")

        try:
            row, col = map(int,
                           input().split())  # Запрашиваем ввод координат от пользователя и преобразуем их в целые числа

            if not (1 <= row <= 4 and 1 <= col <= 4):  # Проверяем корректность введенных координат
                print("Пожалуйста, введите корректные координаты от 1 до 4.")
                continue  # Если координаты некорректные, запрашиваем снова

            if not game.move_tile(row - 1, col - 1):  # Пробуем переместить выбранную плитку (с учетом индексации с нуля)
                continue  # Если ход недопустим, запрашиваем координаты снова

            game.print_board()  # Печатаем текущее состояние доски после хода

        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите два числа.")  # Обрабатываем ошибки ввода
    print("\nПоздравляем! Вы решили головоломку!")  # Поздравляем игрока при решении головоломки

if __name__ == "__main__":
    main()  # Запускаем основную функцию при выполнении скрипта